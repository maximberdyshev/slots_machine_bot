import dotenv from 'dotenv'
import GameState from './GameState.js'
import { Telegraf } from 'telegraf'
import DBC from './DBC.js'

dotenv.config({ path: '~/Prog/smb/.env' })

const smb = new Telegraf(process.env.BOT_TOKEN)

// –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –¥–æ—Å—Ç—É–ø
smb.use(async (ctx, next) => {
  // TODO: –¥–∞–Ω–Ω—ã–µ –æ –¥–æ—Å—Ç—É–ø–µ –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –ø–∞–º—è—Ç—å –±–æ—Ç–∞
  // –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç
  // –∞ –Ω–µ –ø–æ –∫–∞–∂–¥–æ–º—É –±—Ä–æ—Å–∫—É —Å—Ç—É—á–∞—Ç—å –≤ –±–∞–∑—É
  const checkAccess = await DBC.getAcces(ctx.chat.id)
  if (!checkAccess) return
  next()
})

smb.on('dice', async (ctx) => {
  const dice = {
    message_id: ctx.message.message_id,
    user_id: ctx.message.from.id,
    date: ctx.message.date,
  }

  GameState.cleanDice(dice, ctx.deleteMessage.bind(ctx))

  // –∞–Ω—Ç–∏—á–∏—Ç :D
  // (–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ—Ç–∏–≤ —é–∑–µ—Ä–±–æ—Ç–∞!)
  // TODO: –≤–æ–∑–º–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å? )
  if (ctx.message.forward_date) {
    const replyMSG = await ctx.reply('–ß–∏—Ç—ã - –±–∞–Ω!')
    const msg = {
      message_id: replyMSG.message_id,
      user_id: replyMSG.from.id,
      date: replyMSG.date,
    }

    GameState.cleanDice(msg, ctx.deleteMessage.bind(ctx))

    // —á–∏—Ç—ã - –Ω–∞ –≤—ã—Ö–æ–¥!
    return
  }

  if (ctx.message.dice.emoji != 'üé∞') {
    return
  } else {
    // –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    const checkUser = await DBC.getUser(ctx.message.from.id)

    // —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –±—Ä–æ—Å–æ–∫
    const diceThrow = {
      date: new Date(),
      user_id: ctx.message.from.id,
      dice_id: ctx.message.dice.value,
      chat_id: ctx.message.chat.id,
    }

    // –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å, —Ç–æ –ø—Ä–æ—Å—Ç–æ –≤–Ω–µ—Å—Ç–∏ –±—Ä–æ—Å–æ–∫ –≤ –ë–î
    if (checkUser) {
      await DBC.setThrow(diceThrow)
      return
    }

    // –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –ë–î
    const newUser = {
      id: ctx.message.from.id,
      first_name: ctx.message.from.first_name,
      last_name: ctx.message.from.last_name,
      nickname: ctx.message.from.username,
    }
    await DBC.setUser(newUser)

    // –∏ –≤–Ω–µ—Å—Ç–∏ –±—Ä–æ—Å–æ–∫ –≤ –ë–î
    await DBC.setThrow(diceThrow)
    return
  }
})

smb.command('my_dices', async (ctx) => {
  const res = {
    message_id: ctx.message.message_id,
    user_id: ctx.message.from.id,
    date: ctx.message.date,
  }

  GameState.cleanMyDice(res, ctx.deleteMessage.bind(ctx))

  let response = {
    user_name: ctx.message.from.first_name,
    user_balance: 1000,
    dice_counts: 0,
    dice_alko: 0,
    dice_berries: 0,
    dice_lemons: 0,
    dice_axes: 0,
    networth: 0,
  }

  let chance = {
    alko: 0,
    berries: 0,
    lemons: 0,
    axes: 0,
  }

  // –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
  // –µ—Å–ª–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–∂–µ –µ—Å—Ç—å —Å—Ç–∞—Ç–∞
  const checkUser = await DBC.getUser(ctx.message.from.id)
  let sendMSG
  if (checkUser) {
    // TODO: —Å–¥–µ–ª–∞—Ç—å 1-–º –∑–∞–ø—Ä–æ—Å–æ–º –≤ –ë–î
    response.dice_counts = await DBC.getMyDices(ctx.message.from.id, null)
    response.dice_alko = await DBC.getMyDices(ctx.message.from.id, 'alko')
    response.dice_berries = await DBC.getMyDices(ctx.message.from.id, 'berries')
    response.dice_lemons = await DBC.getMyDices(ctx.message.from.id, 'lemons')
    response.dice_axes = await DBC.getMyDices(ctx.message.from.id, 'axes')

    response.networth = await DBC.getMyNetWorth(ctx.message.from.id)
    response.user_balance = 1000 + Number.parseInt(response.networth)

    chance.alko = ((response.dice_alko * 100) / response.dice_counts).toFixed(2)
    chance.berries = (
      (response.dice_berries * 100) /
      response.dice_counts
    ).toFixed(2)
    chance.lemons = (
      (response.dice_lemons * 100) /
      response.dice_counts
    ).toFixed(2)
    chance.axes = ((response.dice_axes * 100) / response.dice_counts).toFixed(2)

    sendMSG = await ctx.sendMessage(`${response.user_name}, —Ç–≤–æ—è —Å—Ç–∞—Ç–∞:
    –±—Ä–æ—Å–∫–æ–≤:  ${response.dice_counts}
    –±–∞—Ä:  ${response.dice_alko},  (${chance.alko}%)
    —è–≥–æ–¥–∫–∏:  ${response.dice_berries},  (${chance.berries}%)
    –ª–∏–º–æ–Ω—ã:  ${response.dice_lemons},  (${chance.lemons}%)
    —Ç–æ–ø–æ—Ä—ã:  ${response.dice_axes},  (${chance.axes}%)
    –±–∞–ª–∞–Ω—Å: ${response.user_balance}
    net worth:  ${response.networth}`)

    return
  }

  // –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, —Ç–æ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  sendMSG = await ctx.sendMessage(`${ctx.message.from.first_name}, —Å–æ—Ä—è–Ω, –Ω–æ –ø–æ —Ç–µ–±–µ –Ω–µ—Ç —Å—Ç–∞—Ç—ã.. 
–ñ–¥—ë—à—å –æ—Å–æ–±–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è? –ö—Ä—É—Ç–∏ —Å–ª–æ—Ç—ã!!!`)

  const msg = {
    message_id: sendMSG.message_id,
    user_id: sendMSG.from.id,
    date: sendMSG.date,
  }

  GameState.cleanMyDice(msg, ctx.deleteMessage.bind(ctx))

  return
})

smb.command('all_stats', async (ctx) => {
  const res = {
    message_id: ctx.message.message_id,
    user_id: ctx.message.from.id,
    date: ctx.message.date,
  }

  GameState.cleanAllStatsLimit(res, ctx.deleteMessage.bind(ctx))

  const allBalance = await DBC.getAllBalance()

  let userStats = []

  for (let balance of allBalance) {
    let user = `${balance.first_name}:   ${
      1000 + Number.parseInt(balance.net_worth)
    }`
    userStats.push(user)
  }

  const sendMSG = await ctx.sendMessage(
    userStats.toString().replaceAll(',', '\n')
  )

  const msg = {
    message_id: sendMSG.message_id,
    user_id: sendMSG.from.id,
    date: sendMSG.date,
  }

  GameState.cleanAllStatsLimit(msg, ctx.deleteMessage.bind(ctx))

  return
})

smb.command('mvp', async (ctx) => {
  const res = {
    message_id: ctx.message.message_id,
    user_id: ctx.message.from.id,
    date: ctx.message.date,
  }

  GameState.cleanMVPLimit(res, ctx.deleteMessage.bind(ctx))

  const mvp = await DBC.getMVP()
  const sendMSG = await ctx.sendMessage(`MVP –¥–Ω—è:
–ò–≥—Ä–æ–∫ ${mvp[0].first_name}!!! –° —Ü–µ–Ω–Ω–æ—Å—Ç—å—é –≤ ${mvp[0].net_worth} –æ—á–∫–æ–≤!!
–ß—Ç–æ –∑–∞ –ª–µ–≤ —ç—Ç–æ—Ç —Ç–∏–≥—Ä!!`)

  const msg = {
    message_id: sendMSG.message_id,
    user_id: sendMSG.from.id,
    date: sendMSG.date,
  }

  GameState.cleanMVPLimit(msg, ctx.deleteMessage.bind(ctx))

  return
})

smb.launch()
